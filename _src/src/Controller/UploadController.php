<?php

namespace App\Controller;

use App\Form\ImageType;
use App\Form\EventType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\File;
use App\Entity\Image;
use App\Entity\Event;

class UploadController extends Controller
{
    /**
     * @Route("/product/new", name="app_product_new")
     */
    public function upload(Request $request)
    {
        $event = new Event();
        $event->addEventId(new Image());
//        var_dump($event);
//        $upload = new Image();
//        $upload->addEvent(new Image());
        $form = $this->createForm(EventType::class, $event);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded PDF file
//            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
//            $file = $event->getEventId()->get('imageName');
            var_dump($event);
//            $attachments = $upload->getFiles();
//            foreach($attachments as $attachment) {
//                $file = $attachment->getFile();
            $file = $form->getData();
//            var_dump($event->getEventId());
//            $originalName = $file->getClientOriginalName();
//            $originalExtension = $file->getClientOriginalExtension();
//            $onlyName = explode('.' . $originalExtension, $originalName);
//var_dump($onlyName[0]);
//            $fileName = $onlyName[0].'_'.$this->generateUniqueFileName() . '.' . $file->guessExtension();

//            $fileName = $onlyName[0] . '_' . $this->generateUniqueFileName() . '.' . $originalExtension;
//            $resizedFileName = $this->resize_image($fileName, 2000, 2000);
//            var_dump($this->generateUrl('f'));
//            $festenName = $event->getEventName()->getEventName();
//            var_dump($festenName->getEventName());
//            if (!is_dir('uploads/images/' . $event->getEventName())) {
//                mkdir('uploads/images/' . $event->getEventName(), 0700);
//            }
            // moves the file to the directory where brochures are stored
//            $file->move(
//                $this->getParameter('image_directory') . '/' .  $event->getEventName(),
//                $fileName
//            );
//           $file =  new UploadedFile($this->getParameter('image_directory') . '/' .  $event->getEventName(),
//                $fileName);
//var_dump($event);
//            $giftList = $form->getData();
            $em = $this->getDoctrine()->getManager();
//            $event->setEventName('hhh');
//            var_dump($em);
            $em->persist($file);
            $em->flush();
            // ... persist the $product variable or any other work
//            }
//            return $this->redirect($this->generateUrl('app_product_list'));
        }

        return $this->render('upload/index.html.twig',
            [
//                'data' => $form->createView(),
                'form' => $form->createView(),
            ]
        );
    }
    public function resize_image($file, $w, $h, $crop=FALSE) {
        list($width, $height) = getimagesize($file);
        $r = $width / $height;
        if ($crop) {
            if ($width > $height) {
                $width = ceil($width-($width*abs($r-$w/$h)));
            } else {
                $height = ceil($height-($height*abs($r-$w/$h)));
            }
            $newwidth = $w;
            $newheight = $h;
        } else {
            if ($w/$h > $r) {
                $newwidth = $h*$r;
                $newheight = $h;
            } else {
                $newheight = $w/$r;
                $newwidth = $w;
            }
        }
        $src = imagecreatefromjpeg($file);
        $dst = imagecreatetruecolor($newwidth, $newheight);
        imagecopyresampled($dst, $src, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);

        return $dst;
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}

